!SESSION 2023-07-03 12:58:59.615 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 12:59:00.683
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 12:59:16.582
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-03 12:59:18.034
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 12:59:18.034
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 12:59:18.034
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-03 12:59:20.649
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-03 13:54:41.670 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 13:54:42.429
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 13:54:52.983
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-03 13:54:54.156
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 13:54:54.156
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 13:54:54.156
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-03 13:54:55.760
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-03 14:00:41.488 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 14:00:42.182
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-03 14:00:46.449
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-03 14:00:47.533
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 14:00:47.533
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-03 14:00:47.533
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-03 14:00:48.923
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-05 09:53:02.893 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-05 09:53:05.023
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-05 09:53:31.434
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-05 09:53:33.361
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-05 09:53:33.361
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-05 09:53:33.361
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-05 09:53:35.921
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jface 2 0 2023-07-05 14:26:38.318
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-05 14:26:38.318
!MESSAGE A conflict occurred for CTRL+INSERT:
Binding(CTRL+INSERT,
	ParameterizedCommand(Command(org.eclipse.tm.terminal.copy,Copy,
		,
		Category(org.eclipse.tm.terminal.category1,Terminal view commands,Terminal view commands,true),
		WorkbenchHandlerServiceHandler("org.eclipse.tm.terminal.copy"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.tm.terminal.EditContext,,,system)
Binding(CTRL+INSERT,
	ParameterizedCommand(Command(org.eclipse.ui.edit.copy,Copy,
		Copy the selection to the clipboard,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.copy"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.dialogAndWindow,,,system)
Binding(CTRL+INSERT,
	ParameterizedCommand(Command(AnsiConsole.command.copy_without_escapes,Copy Text Without ANSI Escapes,
		Copy the console content to clipboard, removing the escape sequences,
		Category(AnsiConsole.command.categoryid,ANSI Support Commands,null,true),
		WorkbenchHandlerServiceHandler("AnsiConsole.command.copy_without_escapes"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.console.ConsoleView,,,system)
!SESSION 2023-07-05 15:26:21.076 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-05 15:26:21.756
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-05 15:26:24.478
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-05 15:26:25.559
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-05 15:26:25.559
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-05 15:26:25.559
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-05 15:26:27.494
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-06 09:44:42.598 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-06 09:44:43.840
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-06 09:49:54.163
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-06 09:49:55.685
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-06 09:49:55.685
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-06 09:49:55.685
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-06 09:49:58.367
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-06 21:31:26.220 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-06 21:31:27.322
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-06 21:31:33.724
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-06 21:31:35.191
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-06 21:31:35.192
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-06 21:31:35.192
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-06 21:31:37.478
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-07 09:50:38.971 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 09:50:39.975
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 09:50:42.592
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-2ndChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-07 09:50:44.085
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 09:50:44.085
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 09:50:44.085
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-07 09:50:46.396
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-07 14:22:29.212 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 14:22:29.897
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY org.eclipse.core.resources 4 567 2023-07-07 14:22:36.528
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2023-07-07 14:22:36.528
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:894)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:874)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:730)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1584)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2023-07-07 14:22:36.528
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:894)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:874)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:730)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1584)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 14:22:36.836
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-07 14:22:37.849
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 14:22:37.849
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 14:22:37.849
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-07 14:22:39.626
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-07 15:17:42.920 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 15:17:43.620
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-07 15:17:45.248
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-07 15:17:46.366
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 15:17:46.366
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-07 15:17:46.366
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-07 15:17:48.368
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-10 10:57:07.875 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 10:57:08.958
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 10:57:11.572
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-10 10:57:13.233
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 10:57:13.233
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 10:57:13.233
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-10 10:57:14.238
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-10 14:29:55.995 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 14:29:56.693
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 14:30:00.326
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenger\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-10 14:30:01.470
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 14:30:01.470
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 14:30:01.470
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-10 14:30:02.829
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-10 14:32:43.970 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 14:32:44.652
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY org.eclipse.core.resources 4 567 2023-07-10 14:32:48.250
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2023-07-10 14:32:48.250
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:894)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:874)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:730)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1584)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2023-07-10 14:32:48.251
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:894)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:874)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:730)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1584)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY ch.qos.logback.classic 1 0 2023-07-10 14:32:48.537
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenge\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-10 14:32:49.626
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 14:32:49.626
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-10 14:32:49.626
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-10 14:32:50.882
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-07-17 10:44:27.808 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-17 10:44:28.507
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-17 10:44:35.834
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenge\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-17 10:44:36.974
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-17 10:44:36.974
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-17 10:44:36.974
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-17 10:44:38.376
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:27.331
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F

										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:27.333
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:27.333
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:27.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F

										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:27.547
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:27.548
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:28.242
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:28.243
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:28.243
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:28.251
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:28.252
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:28.252
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:28.593
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:28.594
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:28.594
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:29.559
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										gra
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:29.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:29.560
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:29.728
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										gra
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:29.728
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:29.729
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1760)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3075)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:35.663
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:35.664
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:35.664
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:35.827
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:35.828
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:35.828
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:36.590
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:36.591
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:36.591
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:36.815
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:36.815
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:36.816
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:51.887
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.sub
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:51.887
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:51.888
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:52.548
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(grauDeclarado)
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:52.549
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:52.549
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:52.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(grauDeclarado)
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:52.713
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:52.714
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:58.016
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal)
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:58.017
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:58.017
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:58.624
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:29:58.625
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:29:58.625
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:29:59.681
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:29:59.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:29:59.682
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:01.626
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:01.626
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:01.626
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:03.843
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:03.843
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:03.844
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:04.130
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:04.131
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:04.131
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:04.273
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:04.274
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:04.275
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:05.420
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:05.421
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:05.421
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:06.960
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal())
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:06.961
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:06.961
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:07.880
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal(""))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:30:07.881
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:30:07.881
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:08.138
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal(""))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:08.139
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:08.139
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:15.919
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("27"))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:30:15.919
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:30:15.920
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:15.926
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("27"))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:15.927
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:15.927
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:16.529
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:30:16.529
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:30:16.530
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:17.354
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:17.354
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:17.355
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:19.253
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"))
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:19.253
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:19.254
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:20.014
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-07-17 12:30:20.014
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-07-17 12:30:20.015
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:20.213
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:20.214
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:20.214
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:20.830
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:20.831
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:20.831
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:22.708
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:22.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:22.709
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:26.159
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:26.160
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:26.160
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:26.169
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:26.170
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:26.170
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:28.127
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:28.128
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:28.128
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-07-17 12:30:31.311
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package br.com.alura.challenge;

import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Conversor {

	public static void main(String[] args) {

		Moeda moeda = new Moeda();

		String[] opcoes = { "Conversor de Moeda", "Conversor de Temperatura" };

		boolean loop = false;

		while (!loop) {

			try {

				UIManager.put("OptionPane.okButtonText", "Avançar");
				UIManager.put("OptionPane.cancelButtonText", "Sair");
				String opcaoSelecionada = (String) JOptionPane.showInputDialog(null, "Escolha uma opção:", "Menu",
						JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

				switch (opcaoSelecionada) {
				case "Conversor de Moeda":

					String valorCapturado = null;
					boolean valorValido = false;

					do {

						while (!valorValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							valorCapturado = JOptionPane.showInputDialog("Insira um valor:");

							try {
								BigDecimal valorDeclarado = new BigDecimal(valorCapturado);
								valorValido = true;

								String[] opcoesDeConversao = { "De Reais a Dólares", "De Reais a Euros",
										"De Reais a Libras Esterlinas", "De Reais a Pesos Argentino",
										"De Reais a Pesos Chileno",

										"De Dólares a Reais", "De Euros a Reais", "De Libras Esterlinas a Reais",
										"De Pesos Argentino a Reais", "De Pesos Chileno a Reais" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a moeda para a qual você deseja girar seu dinheiro:", "Moedas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									// Conversão Internacional
									case "De Reais a Dólares":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getDolar()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Euros":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getEuro()), 2,
												RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: € " + valorDeclarado);
										break;

									case "De Reais a Libras Esterlinas":
										valorDeclarado = valorDeclarado.divide(
												new BigDecimal(moeda.getLibraEsterlinas()), 2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: £ " + valorDeclarado);
										break;

									case "De Reais a Pesos Argentino":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoArgentino()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									case "De Reais a Pesos Chileno":
										valorDeclarado = valorDeclarado.divide(new BigDecimal(moeda.getPesoChileno()),
												2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: $ " + valorDeclarado);
										break;

									// Conversão Nacional
									case "De Dólares a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getDolar()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Euros a Reais":
										valorDeclarado = valorDeclarado.multiply(new BigDecimal(moeda.getEuro()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Libras Esterlinas a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getLibraEsterlinas()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Argentino a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoArgentino()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;

									case "De Pesos Chileno a Reais":
										valorDeclarado = valorDeclarado
												.multiply(new BigDecimal(moeda.getPesoChileno()));
										valorDeclarado = valorDeclarado.setScale(2, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: R$ " + valorDeclarado);
										break;
									}
								} catch (NullPointerException ex) {
									valorValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// Valor inválido inserido
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Valor inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								valorValido = true;
							}

						} // while

						// retorna à lista
					} while (!valorValido); // do

					break; // case1

				case "Conversor de Temperatura":

					String grauCapturado = null;
					boolean grauValido = false;

					do {

						while (!grauValido) {

							UIManager.put("OptionPane.okButtonText", "Avançar");
							UIManager.put("OptionPane.cancelButtonText", "Voltar");
							grauCapturado = JOptionPane.showInputDialog("Insira um grau:");

							try {

								BigDecimal grauDeclarado = new BigDecimal(grauCapturado);
								grauValido = true;

								String[] opcoesDeConversao = { "De Celsius para Fahrenheit", "De Celsius para Kelvin",

										"De Fahrenheit para Celsius", "De Fahrenheit para Kelvin",

										"De Kelvin para Celsius", "De Kelvin para Fahrenheit" };

								String conversaoSelecionada = (String) JOptionPane.showInputDialog(null,
										"Escolha a escala para a qual você deseja converter:", "Escalas",
										JOptionPane.PLAIN_MESSAGE, null, opcoesDeConversao, opcoesDeConversao[0]);

								try {

									UIManager.put("OptionPane.okButtonText", "Finalizar");

									switch (conversaoSelecionada) {

									case "De Celsius para Fahrenheit":
										grauDeclarado = grauDeclarado.multiply(new BigDecimal("1.8"))
												.add(new BigDecimal("32"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °F " + grauDeclarado);
										break;

									case "De Celsius para Kelvin":
										grauDeclarado = grauDeclarado.add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Fahrenheit para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Fahrenheit para Kelvin":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("32"))
												.multiply(new BigDecimal("0.55")).add(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(0, RoundingMode.DOWN);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °K " + grauDeclarado);
										break;

									case "De Kelvin para Celsius":
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273.15"));
										grauDeclarado = grauDeclarado.setScale(1, RoundingMode.UP);
										JOptionPane.showMessageDialog(null,
												"O valor da conversão é de: °C " + grauDeclarado);
										break;

									case "De Kelvin para Fahrenheit":
										(1 K − 273,15) × 9/5 + 32 = -457,7 °F
										grauDeclarado = grauDeclarado.subtract(new BigDecimal("273"));
										break;

									} // switch

								} catch (NullPointerException eX) { // try-catch da conversão
									grauValido = false; // reseta o while
									break; // trava o while
								}

								int opcaoFinal = JOptionPane.showOptionDialog(null, "Deseja continuar?",
										"Selecione uma opção:", JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Sim", "Não", "Cancelar" },
										"Sim");

								if (opcaoFinal == JOptionPane.YES_OPTION) {
									loop = false; // Retorna à lista
								}
								if (opcaoFinal == JOptionPane.NO_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa finalizado.");
									return; // Encerra a aplicação
								}
								if (opcaoFinal == JOptionPane.CANCEL_OPTION) {
									UIManager.put("OptionPane.okButtonText", "Sair");
									JOptionPane.showMessageDialog(null, "Programa concluído.");
									return; // Encerra a aplicação
								}

								// try-catch do input
							} catch (NumberFormatException e) {
								UIManager.put("OptionPane.okButtonText", "Tentar novamente");
								JOptionPane.showMessageDialog(null,
										"Digite apenas números e separe as casas decimais com ' . '", "Grau inválido",
										JOptionPane.ERROR_MESSAGE);
							} catch (NullPointerException e) {
								grauValido = true;
							}

						} // while

					} while (!grauValido); // do

					break; // case2
				}

				// if (opcaoSelecionada == null) {
			} catch (NullPointerException ex) {
				int opcaoSair = JOptionPane.showOptionDialog(null, "Você realmente desejar cancelar a execução?",
						"Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null,
						new Object[] { "Sim", "Não" }, "Não");

				if (opcaoSair == JOptionPane.YES_OPTION) {
					System.exit(0);
				} else {
					loop = false;
				}

			} // try-catch

		} // loop

	} // main

} // class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-07-17 12:30:31.312
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-07-17 12:30:31.312
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-07-18 09:07:43.746 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=20.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-07-18 09:07:44.742
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-07-18 09:07:48.542
!MESSAGE Logback config file: C:\Users\Micro\Desktop\ONE-CoinChallenge\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-07-18 09:07:50.009
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-18 09:07:50.010
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-07-18 09:07:50.010
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-07-18 09:07:52.320
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Micro'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
